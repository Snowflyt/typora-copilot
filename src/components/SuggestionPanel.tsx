import { render } from "preact";
import { useEffect, useRef } from "preact/hooks";

import { t } from "@/i18n";
import { getCaretCoordinate } from "@/utils/dom";

import CopilotIcon from "./CopilotIcon";

import "./SuggestionPanel.scss";

export interface SuggestionPanelProps {
  x: number;
  y: number;
  mode?: NonNullable<CodeMirror.EditorConfiguration["mode"]> | null;
  text: string;
  textColor?: string;
  fontSize?: string | null;
  backgroundColor?: string | null;
  cm?: CodeMirror.Editor;
}

/**
 * Create and attach a suggestion panel to the DOM. The element is placed right below caret.
 * @param text The text to be displayed in the suggestion panel.
 * @returns A function that can be used to remove the suggestion panel from the DOM.
 */
export const attachSuggestionPanel = (
  text: string,
  mode: NonNullable<CodeMirror.EditorConfiguration["mode"]> | null = null,
  options?: { backgroundColor?: string | null; fontSize?: string | null; cm?: CodeMirror.Editor },
) => {
  const pos =
    options?.cm ?
      { x: options.cm.cursorCoords().left, y: options.cm.cursorCoords().top }
    : getCaretCoordinate();
  if (!pos) return () => {};

  const container = document.createElement("div");
  document.body.appendChild(container);

  const { x, y } = pos;
  render(
    <SuggestionPanel
      x={x}
      y={y}
      text={text}
      mode={mode}
      fontSize={options?.fontSize}
      backgroundColor={options?.backgroundColor}
      cm={options?.cm}
    />,
    container,
  );

  // Adjust position when scrolling
  const scrollListener = () => {
    const pos =
      options?.cm ?
        { x: options.cm.cursorCoords().left, y: options.cm.cursorCoords().top }
      : getCaretCoordinate();
    if (!pos) return;
    $(".suggestion-panel").css("top", `calc(${pos.y}px + 1.5em)`);
  };
  if (options?.cm) options.cm.on("scroll", scrollListener);
  $("content").on("scroll", scrollListener);

  return () => {
    if (options?.cm) options.cm.on("scroll", scrollListener);
    $("content").on("scroll", scrollListener);
    render(null, container);
    container.remove();
  };
};

/**
 * A suggestion panel that displays the text generated by Copilot.
 * @returns
 */
const SuggestionPanel: FC<SuggestionPanelProps> = ({
  backgroundColor,
  cm,
  fontSize,
  mode,
  text,
  textColor = "gray",
  x,
  y,
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const codeAreaRef = useRef<HTMLTextAreaElement>(null);

  const maxAvailableWidth =
    (cm ? cm.getWrapperElement() : Files.editor!.writingArea).getBoundingClientRect().width -
    (x - (cm ? cm.getWrapperElement() : Files.editor!.writingArea).getBoundingClientRect().left) -
    30;

  // Calculate actual width after mount, and adjust position
  useEffect(() => {
    const actualWidth = containerRef.current!.getBoundingClientRect().width;

    containerRef.current!.style.left = `min(${x}px, calc(${x}px + ${maxAvailableWidth}px - ${actualWidth}px))`;

    // Highlight syntax using CodeMirror
    const cm = CodeMirror.fromTextArea(codeAreaRef.current!, {
      lineWrapping: true,
      mode: mode || "gfm",
      theme: mode ? "inner null-scroll" : "typora-default",
      maxHighlightLength: Infinity,
      // @ts-expect-error - Extracted from Typora. I don't really know if this prop is used,
      // but to be safe, I just keep it like original
      styleActiveLine: true,
      visibleSpace: true,
      autoCloseTags: true,
      resetSelectionOnContextMenu: false,
      lineNumbers: false,
      dragDrop: false,
    });

    // Adjust cm styles
    const panelBackgroundColor =
      backgroundColor || window.getComputedStyle(document.body).backgroundColor;
    codeAreaRef.current!.style.backgroundColor = panelBackgroundColor;
    cm.getWrapperElement().style.backgroundColor = panelBackgroundColor;
    $(cm.getWrapperElement()).children().css("backgroundColor", panelBackgroundColor);
    cm.getWrapperElement().style.padding = "0";
    if (fontSize) cm.getWrapperElement().style.fontSize = fontSize;
    if (backgroundColor) {
      cm.getWrapperElement().style.padding = "0.5rem";
      cm.getWrapperElement().style.borderRadius = "0.375rem";
    }
    $(cm.getWrapperElement()).find(".CodeMirror-hscrollbar").remove();
    $(cm.getWrapperElement()).find(".CodeMirror-activeline-background").remove();

    // Set visibility to visible
    containerRef.current!.style.removeProperty("visibility");
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <div
      ref={containerRef}
      className="suggestion-panel"
      style={{
        // Visibility is set to hidden on mount to adjust position after calculating actual width,
        // and then set to visible
        visibility: "hidden",
        left: 0,
        top: `calc(${y}px + 1.5em)`,
        maxWidth: `min(80ch, max(40ch, ${maxAvailableWidth}px))`,
        backgroundColor: window.getComputedStyle(document.body).backgroundColor,
        color: window.getComputedStyle(document.body).color,
      }}>
      <textarea ref={codeAreaRef} style={{ padding: 0 }} value={text} />
      <div
        style={{
          color: textColor,
          marginTop: "0.25em",
          marginLeft: "0.25em",
          display: "flex",
          flexDirection: "row",
          alignItems: "center",
        }}>
        <CopilotIcon
          status="Normal"
          textColor={textColor}
          style={{
            marginRight: "0.4em",
            height: "1em",
            width: "1em",
          }}
        />
        <span style={{ marginRight: "0.25em" }}>{t("hint.generated-by-copilot")}</span>
      </div>
    </div>
  );
};

export default SuggestionPanel;
